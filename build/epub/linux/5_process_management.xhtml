<!DOCTYPE html>

<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" /><meta name="generator" content="Docutils 0.18.1: http://docutils.sourceforge.net/" />

    <title>5. Process management</title>
    <link rel="stylesheet" type="text/css" href="../_static/pygments.css" />
    <link rel="stylesheet" type="text/css" href="../_static/epub.css" />
    <link rel="stylesheet" type="text/css" href="../_static/copybutton.css" />
    <link rel="stylesheet" type="text/css" href="../_static/max_width.css" /> 
  </head><body>

    <div class="document">
      <div class="documentwrapper">
          <div class="body" role="main">
            
  <section id="process-management">
<h1>5. Process management</h1>
<ul class="simple">
<li><p>a process is a unit for provisioning system resources</p></li>
<li><p>it is any program, application, or command that runs on the system</p></li>
<li><p>is created in memory in its own address space when a program, application, or command is initiated</p></li>
<li><p>each process has a parent process that spawns it</p></li>
<li><p>a single parent process may have one or many child processes and passes many of its attributes to them at the time of their creation</p></li>
<li><p>each process is assigned a unique identification number, known as the process identifier (PID), which is used by the kernel to manage and control the process through its lifecycle</p></li>
<li><p>when a process completes its lifecycle or is terminated, this event is reported back to its parent process, and all the resources provisioned to it are then freed and the PID is removed</p></li>
</ul>
<div class="admonition warning">
<p class="admonition-title">Warning</p>
<p>Don’t root and drink!</p>
</div>
<p>Learning about process management, we will start a misbehaving process:</p>
<div class="highlight-bash notranslate"><div class="highlight"><pre><span></span><span class="c1"># go to the sandbox</span>
<span class="nb">cd</span><span class="w"> </span>~/sandbox

<span class="c1"># create a new file</span>
vim<span class="w"> </span>bad.py

<span class="c1"># Add this content</span>
!/usr/bin/env<span class="w"> </span>python3
<span class="nv">i</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">0</span>
<span class="k">while</span><span class="w"> </span><span class="nv">i</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="m">0</span>:
<span class="w">        </span>pass

<span class="c1"># press i to insert</span>
<span class="c1"># then :wq</span>
<span class="c1"># This program, when executed, runs in an infinite loop — clearly not something you want running on your server.</span>

<span class="c1"># add execute permission</span>
chmod<span class="w"> </span><span class="m">750</span><span class="w"> </span>bad.py
<span class="c1"># or</span>
chmod<span class="w"> </span>u+x<span class="w"> </span>bad.py

<span class="c1"># Run</span>
./bad.py<span class="w"> </span><span class="p">&amp;</span>

<span class="c1"># to find the process</span>
ps<span class="w"> </span>-ef<span class="w"> </span><span class="p">|</span><span class="w"> </span>grep<span class="w"> </span>bad
<span class="c1"># or</span>
ps<span class="w"> </span>-ef<span class="w"> </span><span class="p">|</span><span class="w"> </span>grep<span class="w"> </span>python
<span class="c1"># or</span>
pgrep<span class="w"> </span>-f<span class="w"> </span>bad

<span class="nb">kill</span><span class="w"> </span>PROCESS_ID
</pre></div>
</div>
<section id="kill-vs-kill-9">
<h2>kill vs kill -9</h2>
<p>The secure and appropriate method of ending a process is kill, often known as <code class="docutils literal notranslate"><span class="pre">kill</span> <span class="pre">-TERM</span></code> or <code class="docutils literal notranslate"><span class="pre">kill</span> <span class="pre">-15</span></code>. It is comparable to properly turning off a computer.
The risky method of brutally murdering a process is <code class="docutils literal notranslate"><span class="pre">kill</span> <span class="pre">-9</span></code>. It might corrupt the data and is similar to unplugging the power wire.</p>
<section id="process-cheat-sheet">
<h3>Process Cheat sheet</h3>
<div class="highlight-bash notranslate"><div class="highlight"><pre><span></span><span class="c1"># list all running processes</span>
ps<span class="w"> </span>aux

<span class="c1"># list all running processes in extra wide format</span>
<span class="c1"># useful to display long commands that are trimmed by default</span>
ps<span class="w"> </span>auxww

<span class="c1"># hierarchy list all running processes</span>
ps<span class="w"> </span>auxf

<span class="c1"># terminate process</span>
<span class="nb">kill</span><span class="w"> </span>PID

<span class="c1"># forcefully terminate process</span>
<span class="nb">kill</span><span class="w"> </span>-9<span class="w"> </span>PID

<span class="c1"># returns a list of PIDs that have &quot;keyword&quot; in the command field</span>
pgrep<span class="w"> </span>-f<span class="w"> </span><span class="s2">&quot;keyword&quot;</span>

<span class="c1"># terminates all PIDs that have &quot;keyword&quot; in the command field</span>
pkill<span class="w"> </span>-f<span class="w"> </span><span class="s2">&quot;keyword&quot;</span>

<span class="c1"># run &quot;command&quot; and send it in the background</span>
<span class="nb">command</span><span class="w"> </span><span class="p">&amp;</span>

<span class="c1"># detach command from tty and run it in the background</span>
<span class="c1"># send stdout and sterr to the cmd.log file</span>
nohup<span class="w"> </span><span class="nb">command</span><span class="w"> </span><span class="m">2</span>&gt;<span class="p">&amp;</span><span class="m">1</span><span class="w"> </span>&gt;<span class="w"> </span>cmd.log<span class="w"> </span><span class="p">&amp;</span>

<span class="c1"># allows you to execute a command or program periodically and also shows your output on the screen which means that you will be able to see the program output in time. By default, watch re-runs the command/program every 2 seconds. The interval can be easily changed to meet your requirements.</span>
watch<span class="w"> </span>free<span class="w"> </span>-m

<span class="c1"># display commands sent to run in the background</span>
<span class="nb">jobs</span>

<span class="c1"># bring the last command sent to the background in the foreground</span>
<span class="nb">fg</span>

<span class="c1"># resume commands paused with CTRL-Z</span>
<span class="nb">bg</span>
</pre></div>
</div>
<div class="admonition warning">
<p class="admonition-title">Warning</p>
<p>Thou shalt not kill -9</p>
</div>
</section>
</section>
</section>


            <div class="clearer"></div>
          </div>
      </div>
      <div class="clearer"></div>
    </div>
  </body>
</html>