<!DOCTYPE html>

<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" /><meta name="generator" content="Docutils 0.18.1: http://docutils.sourceforge.net/" />

    <title>0. Introduction</title>
    <link rel="stylesheet" type="text/css" href="../_static/pygments.css" />
    <link rel="stylesheet" type="text/css" href="../_static/epub.css" />
    <link rel="stylesheet" type="text/css" href="../_static/copybutton.css" />
    <link rel="stylesheet" type="text/css" href="../_static/max_width.css" /> 
  </head><body>

    <div class="document">
      <div class="documentwrapper">
          <div class="body" role="main">
            
  <section id="introduction">
<h1>0. Introduction</h1>
<section id="what-is-git">
<h2>What is GIT?</h2>
<p>Git is a distributed version control system. This means that a local clone of the project is a complete version control repository. These fully-functional local repositories make it easy to work offline or remotely. Developers commit their work locally, and then sync their copy of the repository with the copy on the server. This paradigm differs from centralized version control where clients must synchronize code with a server before creating new versions of code.</p>
<p>Every time work is saved, Git creates a <strong>commit</strong>. A commit is a snapshot of all files at a point in time. If a file has not changed from one commit to the next, Git uses the previously stored file.</p>
<p><strong>Branches</strong>, which are lightweight pointers to work in progress, manage this separation. Once work created in a branch is finished, it can be merged back into the team’s main (or trunk) branch.</p>
</section>
<section id="connect-to-github">
<h2>Connect to GitHub</h2>
<p>There are 2 ways to log in to GitHub:</p>
<ul class="simple">
<li><p>keys</p></li>
<li><p>credentials (username and password)</p></li>
</ul>
<p>Generate the key from your local machine and upload it to GitHub</p>
<div class="highlight-bash notranslate"><div class="highlight"><pre><span></span><span class="c1"># In a DevOps environment we want to have as much information as possible</span>
ssh-keygen<span class="w"> </span>-t<span class="w"> </span>ed25519<span class="w"> </span>-C<span class="w"> </span><span class="s2">&quot;user@hostname&quot;</span>
</pre></div>
</div>
</section>
<section id="what-exactly-is-ed25519">
<h2>What exactly is ed25519?</h2>
<p>ed25519 is a new cryptography solution that provides the Edwards-curve Digital Signature Algorithm (EdDSA).</p>
<p>Similarly, not all software solutions currently support ed25519, but SSH implementations in most modern operating systems do.</p>
<p>Why is ed25519 Key a Good Idea?</p>
<p>When compared to the most common type of SSH key - RSA - ed25519 offers several interesting advantages:</p>
<blockquote>
<div><ol class="arabic simple">
<li><p>It is faster to generate and verify</p></li>
<li><p>it is more secure collision resilience - that is, it is more resistant to hash-function collision attacks (types of attacks where large numbers of keys are generated with the hope of getting two different keys to have matching hashes)</p></li>
<li><p>The keys are smaller, which means they are easier to transfer and copy/paste.</p></li>
</ol>
</div></blockquote>
<p>Read the newly generated key</p>
<div class="highlight-bash notranslate"><div class="highlight"><pre><span></span>cat<span class="w"> </span>~/.ssh/id_ed25519.pub

<span class="c1"># Upload the newly generated key to GitHub</span>
<span class="c1"># https://github.com/settings/keys</span>

<span class="c1"># Clone projects on your local machine</span>
</pre></div>
</div>
<p>We will learn how to use the terminal, console version of git, how to use vim, and fix merge conflicts.</p>
<div class="highlight-bash notranslate"><div class="highlight"><pre><span></span><span class="c1"># install git</span>
sudo<span class="w"> </span>apt<span class="w"> </span>install<span class="w"> </span>git

<span class="c1"># verify that git is installed</span>
git<span class="w"> </span>--version

<span class="c1"># change directory to home</span>
<span class="nb">cd</span><span class="w"> </span>~

<span class="c1"># creates a directory</span>
mkdir<span class="w"> </span>sandbox
<span class="nb">cd</span><span class="w"> </span>sandbox

<span class="c1"># download the project</span>

git<span class="w"> </span>clone<span class="w"> </span>git@github.com:SKILLAB-DevOps/git.git
<span class="nb">cd</span><span class="w"> </span>git<span class="w"> </span><span class="c1"># change directory to project</span>
git<span class="w"> </span>branch<span class="w"> </span>-a<span class="w"> </span><span class="c1"># check what branches are available</span>
git<span class="w"> </span>checkout<span class="w"> </span>master<span class="w"> </span><span class="c1"># move to a different branch</span>
git<span class="w"> </span>checkout<span class="w"> </span>develop<span class="w"> </span><span class="c1"># move back to develop</span>
git<span class="w"> </span>checkout<span class="w"> </span>-b<span class="w"> </span>feature/yourName<span class="w"> </span><span class="c1"># create a new branch with your name</span>
</pre></div>
</div>
</section>
<section id="create-a-scripts-project">
<h2>1. Create a scripts project</h2>
<p>Create a new project in your userspace named <code class="docutils literal notranslate"><span class="pre">scripts</span></code>. Press on the Kitten on the top left then new.</p>
<div class="highlight-bash notranslate"><div class="highlight"><pre><span></span><span class="c1"># Clone the new project</span>
git<span class="w"> </span>clone<span class="w"> </span>git@github.com:&lt;USER&gt;/scripts.git

<span class="c1"># Change the directory to your new repository</span>
<span class="nb">cd</span><span class="w"> </span>scripts

<span class="c1"># Config GitHub information</span>
git<span class="w"> </span>config<span class="w"> </span>--global<span class="w"> </span>user.email<span class="w"> </span><span class="s2">&quot;MAIL&quot;</span>
git<span class="w"> </span>config<span class="w"> </span>--global<span class="w"> </span>user.name<span class="w"> </span><span class="s2">&quot;&lt;USER&gt;&quot;</span>

<span class="c1"># Create a new script</span>
vim<span class="w"> </span>HelloWorld

<span class="c1"># Add Hello World in it</span>
<span class="c1"># Check the files that will be pushed to remote</span>
git<span class="w"> </span>status

<span class="c1"># Add the HelloWorld in git staging</span>
git<span class="w"> </span>add<span class="w"> </span>HelloWorld

<span class="c1"># Add a commit message</span>
git<span class="w"> </span>commit<span class="w"> </span>-m<span class="w"> </span><span class="s2">&quot;Initial commit&quot;</span>

<span class="c1"># Push the code</span>
git<span class="w"> </span>push
</pre></div>
</div>
</section>
<section id="add-your-presentation-into-skillab-git-project">
<h2>2. Add your presentation into Skillab - git project</h2>
<p>Create a markdown file with your name and some information use at least 5 different syntaxes from <a class="reference external" href="https://github.com/adam-p/markdown-here/wiki/Markdown-Cheatsheet">https://github.com/adam-p/markdown-here/wiki/Markdown-Cheatsheet</a></p>
<p>I have added an example, but be creative:</p>
<div class="highlight-bash notranslate"><div class="highlight"><pre><span></span>**Claudiu**
*DevOps<span class="w"> </span>Engineer*
Likes:

<span class="w">  </span>*<span class="w"> </span><span class="o">[</span>x<span class="o">]</span><span class="w"> </span>coding
<span class="w">  </span>*<span class="w"> </span><span class="o">[</span>x<span class="o">]</span><span class="w"> </span>teaching
<span class="w">  </span>*<span class="w"> </span><span class="o">[</span>x<span class="o">]</span><span class="w"> </span>video<span class="w"> </span>games
<span class="w">  </span>*<span class="w"> </span><span class="o">[</span>x<span class="o">]</span><span class="w"> </span>mma
</pre></div>
</div>
<p>I would like to have in the presentation:</p>
<blockquote>
<div><ol class="arabic simple">
<li><p>name</p></li>
<li><p>profession</p></li>
<li><p>hobbies</p></li>
<li><p>why are you here?</p></li>
<li><p>do you like DevOps?</p></li>
<li><p>what would you like more?</p></li>
<li><p>what would you like less</p></li>
</ol>
</div></blockquote>
</section>
<section id="how-to">
<h2>How to</h2>
<div class="highlight-bash notranslate"><div class="highlight"><pre><span></span>vim<span class="w"> </span>presentations.md<span class="w"> </span><span class="c1"># keep this name so we can have some merge conflicts</span>

git<span class="w"> </span>add<span class="w"> </span>presentations.md
<span class="c1"># or</span>
<span class="c1"># pay attention it adds everything</span>

git<span class="w"> </span>add<span class="w"> </span>--all

<span class="c1"># now press the letter &quot;i&quot; to insert</span>
<span class="c1"># when you are done writing press the ESCAPE key</span>

<span class="c1"># write :wq and press ENTER</span>

git<span class="w"> </span>commit<span class="w"> </span>-m<span class="w"> </span><span class="s2">&quot;Message&quot;</span><span class="w"> </span><span class="c1"># Keep message informative</span>

git<span class="w"> </span>push
</pre></div>
</div>
</section>
<section id="solving-merge-conflicts">
<h2>Solving merge conflicts</h2>
<p>To resolve a Git merge conflict, follow these steps:</p>
<blockquote>
<div><ol class="arabic simple">
<li><p>Identify the conflicting file(s): Git will mark the conflicts in the affected files with conflict markers.</p></li>
<li><p>Open the conflicting file(s) and locate the conflict markers.</p></li>
<li><p>Choose which version to keep or manually edit the file to include the changes you want.</p></li>
<li><p>Remove the conflict markers (e.g. “&lt;&lt;&lt;&lt;&lt;&lt;&lt;”).</p></li>
<li><p>Commit the resolved file(s).</p></li>
<li><p>Repeat the process for any other conflicting files.</p></li>
</ol>
</div></blockquote>
<p>It’s important to carefully review the changes and make sure the resulting file is what you intended before committing. You may also want to consider using a merge tool to assist with resolving conflicts.</p>
</section>
</section>


            <div class="clearer"></div>
          </div>
      </div>
      <div class="clearer"></div>
    </div>
  </body>
</html>