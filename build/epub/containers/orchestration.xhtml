<!DOCTYPE html>

<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" /><meta name="generator" content="Docutils 0.18.1: http://docutils.sourceforge.net/" />

    <title>6. Container orchestration</title>
    <link rel="stylesheet" type="text/css" href="../_static/pygments.css" />
    <link rel="stylesheet" type="text/css" href="../_static/epub.css" />
    <link rel="stylesheet" type="text/css" href="../_static/copybutton.css" />
    <link rel="stylesheet" type="text/css" href="../_static/max_width.css" /> 
  </head><body>

    <div class="document">
      <div class="documentwrapper">
          <div class="body" role="main">
            
  <section id="container-orchestration">
<h1>6. Container orchestration</h1>
<table class="docutils align-default">
<thead>
<tr class="row-odd"><th class="head"><p>Docker compose</p></th>
<th class="head"><p>Docker Swarm</p></th>
</tr>
</thead>
<tbody>
<tr class="row-even"><td><p>Simple container orchestration</p></td>
<td><p>cluster orchestration</p></td>
</tr>
<tr class="row-odd"><td><p>orchestration deployment tool it helps users deploying adhoc containers</p></td>
<td><p>orchestration management tool for Docker applications, it helps users in setting up and deploying a Docker node cluster</p></td>
</tr>
<tr class="row-even"><td><p>build tool that lets you define and configure a group of related containers</p></td>
<td><p>manages multiple docker engines in a way that lets you treat them almost as a single unit. Swarm exposes an API that is mostly compatible with the Docker Remote API, which allows existing applications to use Swarm to scale horizontally without having to completely overhaul the existing interface to the container engine</p></td>
</tr>
</tbody>
</table>
<section id="docker-compose">
<h2>Docker Compose</h2>
<p>With the help of Docker Compose, we define a group of containers to start up together with their runtime characteristics in a YAML file.
Each of these containers is referred to as a “service” by Docker Compose.
Which defines a “service” as a container that interacts with other containers(discoverable and available over a network) in some way and has particular runtime features.</p>
<p>Docker compose is packaged together with Docker Desktop.</p>
<div class="highlight-bash notranslate"><div class="highlight"><pre><span></span>PS<span class="w"> </span>C:<span class="se">\U</span>sers<span class="se">\w</span>indows_user&gt;<span class="w"> </span>docker-compose<span class="w"> </span>--version
Docker<span class="w"> </span>Compose<span class="w"> </span>version<span class="w"> </span>v2.15.1
</pre></div>
</div>
<p>Here’s an example of a simple Flask application that writes a string to a Redis database:</p>
<p>Run in WSL:</p>
<div class="highlight-bash notranslate"><div class="highlight"><pre><span></span><span class="c1"># create a new virtual environment</span>
python3<span class="w"> </span>-m<span class="w"> </span>venv<span class="w"> </span>venv

<span class="c1"># activate that virtual environment</span>
.<span class="w"> </span>venv/bin/activate

<span class="c1"># install dependencies</span>
pip<span class="w"> </span>install<span class="w"> </span>flask
</pre></div>
</div>
<div class="highlight-python notranslate"><div class="highlight"><pre><span></span><span class="kn">from</span> <span class="nn">flask</span> <span class="kn">import</span> <span class="n">Flask</span>
<span class="kn">import</span> <span class="nn">redis</span>

<span class="n">app</span> <span class="o">=</span> <span class="n">Flask</span><span class="p">(</span><span class="vm">__name__</span><span class="p">)</span>

<span class="c1"># Connect to the Redis database</span>
<span class="n">r</span> <span class="o">=</span> <span class="n">redis</span><span class="o">.</span><span class="n">Redis</span><span class="p">(</span><span class="n">host</span><span class="o">=</span><span class="s1">&#39;localhost&#39;</span><span class="p">,</span> <span class="n">port</span><span class="o">=</span><span class="mi">6379</span><span class="p">)</span>

<span class="nd">@app</span><span class="o">.</span><span class="n">route</span><span class="p">(</span><span class="s1">&#39;/write/&lt;string:message&gt;&#39;</span><span class="p">)</span>
<span class="k">def</span> <span class="nf">write_to_redis</span><span class="p">(</span><span class="n">message</span><span class="p">):</span>
    <span class="c1"># Write the message to the Redis database</span>
    <span class="n">r</span><span class="o">.</span><span class="n">set</span><span class="p">(</span><span class="s1">&#39;message&#39;</span><span class="p">,</span> <span class="n">message</span><span class="p">)</span>
    <span class="k">return</span> <span class="s2">&quot;Message written to Redis: &quot;</span> <span class="o">+</span> <span class="n">message</span>

<span class="k">if</span> <span class="vm">__name__</span> <span class="o">==</span> <span class="s1">&#39;__main__&#39;</span><span class="p">:</span>
    <span class="n">app</span><span class="o">.</span><span class="n">run</span><span class="p">(</span><span class="n">debug</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>
</pre></div>
</div>
<p>In this example, the application creates a route <code class="docutils literal notranslate"><span class="pre">/write/&lt;string:message&gt;</span></code> that takes a message as a parameter. When this route is accessed, the function <code class="docutils literal notranslate"><span class="pre">write_to_redis</span></code> is called and it writes the message to the Redis database using the set method, it also returns a string indicating that the message has been written to the Redis database.</p>
<p>The redis module is used to connect to the Redis database. In this example, it is assumed that the Redis database is running on the <code class="docutils literal notranslate"><span class="pre">localhost</span></code> at the default port <code class="docutils literal notranslate"><span class="pre">6379</span></code>.</p>
<p>You can run this application by running the following command:</p>
<div class="highlight-bash notranslate"><div class="highlight"><pre><span></span><span class="nb">export</span><span class="w"> </span><span class="nv">FLASK_APP</span><span class="o">=</span>app.py
flask<span class="w"> </span>run
</pre></div>
</div>
<p>You can test the application by accessing the route in your browser, for example, if you run the application on your localhost, you can test it by going to <a class="reference external" href="http://localhost:5000/write/hello">http://localhost:5000/write/hello</a></p>
<p>Here are some common methods for writing data to a Redis database, along with example code:</p>
<ol class="arabic simple">
<li><p><code class="docutils literal notranslate"><span class="pre">set(name,</span> <span class="pre">value)</span></code>: This method sets the value of a key in the Redis database.</p></li>
</ol>
<div class="highlight-python notranslate"><div class="highlight"><pre><span></span><span class="kn">import</span> <span class="nn">redis</span>

<span class="n">r</span> <span class="o">=</span> <span class="n">redis</span><span class="o">.</span><span class="n">Redis</span><span class="p">(</span><span class="n">host</span><span class="o">=</span><span class="s1">&#39;localhost&#39;</span><span class="p">,</span> <span class="n">port</span><span class="o">=</span><span class="mi">6379</span><span class="p">)</span>
<span class="n">r</span><span class="o">.</span><span class="n">set</span><span class="p">(</span><span class="s1">&#39;name&#39;</span><span class="p">,</span> <span class="s1">&#39;John Doe&#39;</span><span class="p">)</span>
</pre></div>
</div>
<ol class="arabic simple" start="2">
<li><p><code class="docutils literal notranslate"><span class="pre">hset(name,</span> <span class="pre">key,</span> <span class="pre">value)</span></code>: This method sets the value of a field in a hash stored at key.</p></li>
</ol>
<div class="highlight-python notranslate"><div class="highlight"><pre><span></span><span class="n">r</span><span class="o">.</span><span class="n">hset</span><span class="p">(</span><span class="s1">&#39;person&#39;</span><span class="p">,</span> <span class="s1">&#39;name&#39;</span><span class="p">,</span> <span class="s1">&#39;John Doe&#39;</span><span class="p">)</span>
<span class="n">r</span><span class="o">.</span><span class="n">hset</span><span class="p">(</span><span class="s1">&#39;person&#39;</span><span class="p">,</span> <span class="s1">&#39;age&#39;</span><span class="p">,</span> <span class="s1">&#39;30&#39;</span><span class="p">)</span>
</pre></div>
</div>
<ol class="arabic simple" start="3">
<li><p><code class="docutils literal notranslate"><span class="pre">rpush(name,</span> <span class="pre">*values)</span></code>: This method appends one or multiple values to a list stored at key.</p></li>
</ol>
<div class="highlight-python notranslate"><div class="highlight"><pre><span></span><span class="n">r</span><span class="o">.</span><span class="n">rpush</span><span class="p">(</span><span class="s1">&#39;colors&#39;</span><span class="p">,</span> <span class="s1">&#39;red&#39;</span><span class="p">)</span>
<span class="n">r</span><span class="o">.</span><span class="n">rpush</span><span class="p">(</span><span class="s1">&#39;colors&#39;</span><span class="p">,</span> <span class="s1">&#39;green&#39;</span><span class="p">)</span>
<span class="n">r</span><span class="o">.</span><span class="n">rpush</span><span class="p">(</span><span class="s1">&#39;colors&#39;</span><span class="p">,</span> <span class="s1">&#39;blue&#39;</span><span class="p">)</span>
</pre></div>
</div>
<ol class="arabic simple" start="4">
<li><p><code class="docutils literal notranslate"><span class="pre">sadd(name,</span> <span class="pre">*values)</span></code>: This method adds one or multiple members to a set stored at key.</p></li>
</ol>
<div class="highlight-python notranslate"><div class="highlight"><pre><span></span><span class="n">r</span><span class="o">.</span><span class="n">sadd</span><span class="p">(</span><span class="s1">&#39;fruits&#39;</span><span class="p">,</span> <span class="s1">&#39;apple&#39;</span><span class="p">)</span>
<span class="n">r</span><span class="o">.</span><span class="n">sadd</span><span class="p">(</span><span class="s1">&#39;fruits&#39;</span><span class="p">,</span> <span class="s1">&#39;banana&#39;</span><span class="p">)</span>
<span class="n">r</span><span class="o">.</span><span class="n">sadd</span><span class="p">(</span><span class="s1">&#39;fruits&#39;</span><span class="p">,</span> <span class="s1">&#39;orange&#39;</span><span class="p">)</span>
</pre></div>
</div>
<section id="run-in-wsl">
<h3>RUN IN WSL</h3>
<div class="highlight-bash notranslate"><div class="highlight"><pre><span></span><span class="c1"># switch to the sandbox directory</span>
<span class="nb">cd</span><span class="w"> </span>~/sandbox/
<span class="c1"># clone project from git using git clone in wsl or if you have it already git pull</span>
git<span class="w"> </span>clone<span class="w"> </span>git@github.com:SKILLAB-DevOps/containers.git
<span class="c1"># or</span>
<span class="nb">cd</span><span class="w"> </span>containers<span class="w"> </span><span class="o">&amp;&amp;</span><span class="w"> </span>git<span class="w"> </span>pull
<span class="c1"># change the directory to the example</span>
<span class="nb">cd</span><span class="w"> </span>docker_examples/compose_flask

<span class="c1"># open explorer to retrieve the wsl location</span>
explorer.exe<span class="w"> </span>.
</pre></div>
</div>
</section>
<section id="run-in-powershell">
<h3>RUN IN POWERSHELL</h3>
<div class="highlight-bash notranslate"><div class="highlight"><pre><span></span><span class="nb">cd</span><span class="w"> </span>WSL_LOCATION

<span class="c1"># build the Dockerfile to get an image to be reused</span>
docker<span class="w"> </span>build<span class="w"> </span>-t<span class="w"> </span>flask_redis<span class="w"> </span>.

<span class="c1"># we can check the new image created using</span>
docker<span class="w"> </span>images

<span class="c1"># start the docker-compose</span>
docker-compose<span class="w"> </span>up

<span class="c1"># or</span>
docker-compose<span class="w"> </span>up<span class="w"> </span>-d
</pre></div>
</div>
<p>Open another instance of Powershell:</p>
<div class="highlight-bash notranslate"><div class="highlight"><pre><span></span><span class="c1"># check the services</span>
docker-compose<span class="w"> </span>ls

<span class="c1"># check the logs</span>
docker-compose<span class="w"> </span>logs
</pre></div>
</div>
</section>
</section>
<section id="docker-swarm">
<h2>Docker Swarm</h2>
<img alt="How docker swarm works" src="../_images/docker_swarm.drawio.png" style="width: 1000px;" />
<section id="activating-docker-swarm">
<h3>Activating Docker Swarm</h3>
<p>Make sure that Swarm is enabled on your Docker Desktop by typing in Powershell <code class="docutils literal notranslate"><span class="pre">docker</span> <span class="pre">system</span> <span class="pre">info</span></code>, and looking for a message <code class="docutils literal notranslate"><span class="pre">Swarm:</span> <span class="pre">active</span></code>.
If Swarm isn’t on, run <code class="docutils literal notranslate"><span class="pre">docker</span> <span class="pre">swarm</span> <span class="pre">init</span></code> in the Powershell to set it up.
To join a Docker Swarm cluster you run <code class="docutils literal notranslate"><span class="pre">docker</span> <span class="pre">swarm</span> <span class="pre">join</span></code>.</p>
</section>
<section id="id1">
<h3>RUN IN POWERSHELL</h3>
<div class="highlight-bash notranslate"><div class="highlight"><pre><span></span><span class="c1"># Enable</span>
docker<span class="w"> </span>swarm<span class="w"> </span>init

<span class="c1"># Disable</span>
docker<span class="w"> </span>swarm<span class="w"> </span>leave

<span class="c1"># Error response from daemon: You are attempting to leave the swarm on a node that is participating as a manager. Removing the last manager erases all current state of the swarm. Use `--force` to ignore this message.</span>
docker<span class="w"> </span>swarm<span class="w"> </span>leave<span class="w"> </span>--force

<span class="c1"># deploy a new service</span>
docker<span class="w"> </span>stack<span class="w"> </span>deploy<span class="w"> </span>flaskapp<span class="w"> </span>-c<span class="w"> </span>docker-compose.yml

<span class="c1"># check the stack</span>
docker<span class="w"> </span>stack<span class="w"> </span>ls

<span class="c1"># check the services</span>
docker<span class="w"> </span>service<span class="w"> </span>ls

<span class="c1"># check the logs of the</span>
docker<span class="w"> </span>service<span class="w"> </span>logs<span class="w"> </span>flaskapp_web
</pre></div>
</div>
</section>
</section>
</section>


            <div class="clearer"></div>
          </div>
      </div>
      <div class="clearer"></div>
    </div>
  </body>
</html>